/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.edu.utfpr.view.cadastro.mantercliente;

import br.edu.utfpr.controller.CidadeController;
import br.edu.utfpr.controller.ClienteController;
import br.edu.utfpr.controller.EstadoController;
import br.edu.utfpr.model.entity.Cidade;
import br.edu.utfpr.model.entity.Cliente;
import br.edu.utfpr.model.entity.Estado;
import br.edu.utfpr.view.componentes.IToolBarCrud;
import java.util.List;
import javax.swing.JOptionPane;
import mark.utils.el.annotation.AnnotationResolver;
import mark.utils.swing.table.ObjectTableModel;

/**
 *
 * @author root
 */
public class FormManterCliente extends javax.swing.JInternalFrame implements IToolBarCrud {

    private ObjectTableModel objectTableModel;

    /**
     * Creates new form FormManterCliente
     */
    public FormManterCliente() {
        initComponents();

        toolBarCrudBarraMenu.setIToolBarCrud(this);
        carregaTabelaDados();
        carregaListaEstado();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPaneContainer = new javax.swing.JScrollPane();
        jPanelFiltro = new javax.swing.JPanel();
        jTextFieldBusca = new javax.swing.JTextField();
        jLabelBusca = new javax.swing.JLabel();
        jButtonBusca = new javax.swing.JButton();
        jScrollPaneTabela = new javax.swing.JScrollPane();
        jTableDados = new javax.swing.JTable();
        toolBarCrudBarraMenu = new br.edu.utfpr.view.componentes.ToolBarCrud();
        jPanelDados = new javax.swing.JPanel();
        jLabelCodigo = new javax.swing.JLabel();
        jTextFieldCodigo = new javax.swing.JTextField();
        jLabelNome = new javax.swing.JLabel();
        jTextFieldNome = new javax.swing.JTextField();
        jLabelTelefone = new javax.swing.JLabel();
        jTextFieldTelefone = new javax.swing.JTextField();
        jLabelEndereco = new javax.swing.JLabel();
        jTextFieldEndereco = new javax.swing.JTextField();
        jLabelEstado = new javax.swing.JLabel();
        jComboBoxEstado = new javax.swing.JComboBox();
        jLabelCidade = new javax.swing.JLabel();
        jComboBoxCidade = new javax.swing.JComboBox();

        setClosable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Manter Cliente");

        jScrollPaneContainer.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneContainer.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPaneContainer.setAutoscrolls(true);

        jPanelFiltro.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Filtro", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));
        jPanelFiltro.setPreferredSize(new java.awt.Dimension(0, 30));

        jLabelBusca.setText("Busca");

        jButtonBusca.setText("Busca");
        jButtonBusca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBuscaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelFiltroLayout = new javax.swing.GroupLayout(jPanelFiltro);
        jPanelFiltro.setLayout(jPanelFiltroLayout);
        jPanelFiltroLayout.setHorizontalGroup(
            jPanelFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFiltroLayout.createSequentialGroup()
                .addComponent(jLabelBusca)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldBusca, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonBusca))
        );
        jPanelFiltroLayout.setVerticalGroup(
            jPanelFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFiltroLayout.createSequentialGroup()
                .addGroup(jPanelFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldBusca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelBusca)
                    .addComponent(jButtonBusca))
                .addGap(0, 12, Short.MAX_VALUE))
        );

        jScrollPaneContainer.setViewportView(jPanelFiltro);

        jScrollPaneTabela.setAutoscrolls(true);
        jScrollPaneTabela.setMinimumSize(new java.awt.Dimension(50, 75));

        jTableDados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableDadosMouseClicked(evt);
            }
        });
        jScrollPaneTabela.setViewportView(jTableDados);

        jPanelDados.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Dados", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));
        jPanelDados.setAutoscrolls(true);

        jLabelCodigo.setText("Código");

        jTextFieldCodigo.setEditable(false);

        jLabelNome.setText("Nome");

        jTextFieldNome.setEditable(false);

        jLabelTelefone.setText("Telefone");

        jTextFieldTelefone.setEditable(false);

        jLabelEndereco.setText("Endereço");

        jTextFieldEndereco.setEditable(false);

        jLabelEstado.setText("Estado");

        jComboBoxEstado.setEnabled(false);
        jComboBoxEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxEstadoActionPerformed(evt);
            }
        });

        jLabelCidade.setText("Cidade");

        jComboBoxCidade.setEnabled(false);

        javax.swing.GroupLayout jPanelDadosLayout = new javax.swing.GroupLayout(jPanelDados);
        jPanelDados.setLayout(jPanelDadosLayout);
        jPanelDadosLayout.setHorizontalGroup(
            jPanelDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDadosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelTelefone)
                    .addComponent(jLabelEstado)
                    .addComponent(jLabelCodigo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextFieldCodigo)
                    .addComponent(jTextFieldTelefone)
                    .addComponent(jComboBoxEstado, 0, 95, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelNome)
                    .addComponent(jLabelEndereco)
                    .addComponent(jLabelCidade))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldNome)
                    .addComponent(jComboBoxCidade, 0, 106, Short.MAX_VALUE)
                    .addComponent(jTextFieldEndereco))
                .addContainerGap())
        );
        jPanelDadosLayout.setVerticalGroup(
            jPanelDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDadosLayout.createSequentialGroup()
                .addGroup(jPanelDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelCodigo)
                    .addComponent(jTextFieldCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelNome)
                    .addComponent(jTextFieldNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelTelefone)
                    .addComponent(jTextFieldTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelEndereco)
                    .addComponent(jTextFieldEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelEstado)
                    .addComponent(jComboBoxEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelCidade)
                    .addComponent(jComboBoxCidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPaneContainer, javax.swing.GroupLayout.DEFAULT_SIZE, 394, Short.MAX_VALUE)
            .addComponent(jScrollPaneTabela, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(jPanelDados, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(toolBarCrudBarraMenu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPaneContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPaneTabela, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(toolBarCrudBarraMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelDados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonBuscaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBuscaActionPerformed
        // TODO add your handling code here:
        carregaTabelaDados();
    }//GEN-LAST:event_jButtonBuscaActionPerformed

    private void jTableDadosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableDadosMouseClicked
        // TODO add your handling code here:
        int linha = jTableDados.getSelectedRow();

        if (jTableDados.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Nenhum um registro selecionado. Favor selecionar pelo menos um registro.");
        } else {
            carregarCampos((Cliente) objectTableModel.getValue(linha));
        }
    }//GEN-LAST:event_jTableDadosMouseClicked

    private void jComboBoxEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxEstadoActionPerformed
        carregaListaCidade((Estado) jComboBoxEstado.getSelectedItem());
    }//GEN-LAST:event_jComboBoxEstadoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBusca;
    private javax.swing.JComboBox jComboBoxCidade;
    private javax.swing.JComboBox jComboBoxEstado;
    private javax.swing.JLabel jLabelBusca;
    private javax.swing.JLabel jLabelCidade;
    private javax.swing.JLabel jLabelCodigo;
    private javax.swing.JLabel jLabelEndereco;
    private javax.swing.JLabel jLabelEstado;
    private javax.swing.JLabel jLabelNome;
    private javax.swing.JLabel jLabelTelefone;
    private javax.swing.JPanel jPanelDados;
    private javax.swing.JPanel jPanelFiltro;
    private javax.swing.JScrollPane jScrollPaneContainer;
    private javax.swing.JScrollPane jScrollPaneTabela;
    private javax.swing.JTable jTableDados;
    private javax.swing.JTextField jTextFieldBusca;
    private javax.swing.JTextField jTextFieldCodigo;
    private javax.swing.JTextField jTextFieldEndereco;
    private javax.swing.JTextField jTextFieldNome;
    private javax.swing.JTextField jTextFieldTelefone;
    private br.edu.utfpr.view.componentes.ToolBarCrud toolBarCrudBarraMenu;
    // End of variables declaration//GEN-END:variables

    @Override
    public void novo() {
        limparCampos();
        setEnabledComponentes(true);
    }

    @Override
    public void alterar() {
        setEnabledComponentes(true);
    }

    @Override
    public void excluir() {
        int linha = jTableDados.getSelectedRow();

        if (jTableDados.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Nenhum um registro selecionado. Favor selecionar pelo menos um registro.");
        } else {
            Cliente cliente = (Cliente) objectTableModel.getValue(linha);

            if (JOptionPane.showConfirmDialog(this, "Tem certeza que deseja excluir o registro:\n" + cliente.getNome(), "Confirmação", JOptionPane.YES_NO_OPTION) == 0) {
                ClienteController clienteController = new ClienteController();
                clienteController.apagar(cliente);
                carregaTabelaDados();
                JOptionPane.showMessageDialog(this, "Excluido com sucesso.");
            }
        }
    }

    @Override
    public void gravar() {
        ClienteController clienteController = new ClienteController();
        Cliente cliente = new Cliente();

        if (validaCampos()) {
            if (!jTextFieldCodigo.getText().equals("")) {
                cliente.setIdCliente(Integer.parseInt(jTextFieldCodigo.getText()));
            }
            
            cliente.setNome(jTextFieldNome.getText());
            cliente.setTelefone(jTextFieldTelefone.getText());
            cliente.setEndereco(jTextFieldEndereco.getText());
            cliente.setIdCidade((Cidade) jComboBoxCidade.getSelectedItem());
            
            clienteController.gravar(cliente);
            
            limparCampos();

            carregaTabelaDados();

            setEnabledComponentes(false);

            toolBarCrudBarraMenu.isGravar = true;
            
            JOptionPane.showMessageDialog(this, "Dados gravados com sucesso.");
        } else {
            toolBarCrudBarraMenu.isGravar = false;
        }
    }

    @Override
    public void imprimir() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void cancelar() {
        setEnabledComponentes(false);
        limparCampos();
    }

    private ObjectTableModel carregaTabelaDados() {
        limparCampos();
        ClienteController clienteCon = new ClienteController();

        List<Cliente> listCliente = null;

        AnnotationResolver annotationResolver = new AnnotationResolver(Cliente.class);
        objectTableModel = new ObjectTableModel(annotationResolver, "id_Cliente,nome,telefone,endereco,idCidade");
//        jTableDados.setModel(objectTableModel);

        if (jTextFieldBusca.getText().equals("") || jTextFieldBusca == null) {
            listCliente = clienteCon.getAll();

            if ((listCliente == null) || (listCliente.isEmpty())) {
                JOptionPane.showMessageDialog(this, "Nenhum cliente cadastrado até o momento.", "Atenção", JOptionPane.ERROR_MESSAGE);
            } else {
                jTableDados.setModel(objectTableModel);
                objectTableModel.addAll(listCliente);
            }
        } else {
            // Falta implementar o filtro na controller
//            listCliente = clienteCon.getByFiltro(jTextFieldBusca.getText());

            if (listCliente == null && listCliente.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Nenhum cliente cadastrado que contenha o termo '" + jTextFieldBusca.getText() + "'.", "Atenção", JOptionPane.ERROR_MESSAGE);
            } else {
                jTableDados.setModel(objectTableModel);
                objectTableModel.addAll(listCliente);
            }
        }

        if ((listCliente == null) || (listCliente.isEmpty())) {
            return null;
        } else {
            return objectTableModel;
        }
    }

    private void carregarCampos(Cliente cliente) {
        jTextFieldCodigo.setText(cliente.getIdCliente().toString());
        jTextFieldNome.setText(cliente.getNome());
        jTextFieldTelefone.setText(cliente.getTelefone());
        jTextFieldEndereco.setText(cliente.getEndereco());
        jComboBoxEstado.setSelectedItem(cliente.getIdCidade().getIdEstado());
        jComboBoxCidade.setSelectedItem(cliente.getIdCidade());

    }

    private void carregaListaCidade(Estado estado) {
        CidadeController cidadeController = new CidadeController();

        List<Cidade> listCidade = null;
        
        if (estado == null) {
            listCidade = cidadeController.getAll();
        } else {
            listCidade = estado.getCidadeList();
        }
        
        jComboBoxCidade.removeAllItems();
        
        for (Cidade cidade : listCidade) {
            jComboBoxCidade.addItem(cidade);
        }
    }

    private void carregaListaEstado() {
        EstadoController estadoController = new EstadoController();

        List<Estado> listEstado = estadoController.getAll();
        // Poderia ser desta forma, pega o valor do toString() da entidade
//        jComboBoxEstado.setModel( new DefaultComboBoxModel(listEstado.toArray()));
//        jComboBoxEstado.setEnabled(false);
        for (Estado estado : listEstado) {
            jComboBoxEstado.addItem(estado);
        }
    }

    private void setEnabledComponentes(boolean isEnabled) {
        jTextFieldNome.setEditable(isEnabled);
        jTextFieldTelefone.setEditable(isEnabled);
        jTextFieldEndereco.setEditable(isEnabled);
        jComboBoxEstado.setEnabled(isEnabled);
        jComboBoxCidade.setEnabled(isEnabled);
    }

    private void limparCampos() {
        jTextFieldCodigo.setText("");
        jTextFieldNome.setText("");
        jTextFieldTelefone.setText("");
        jTextFieldEndereco.setText("");
    }

    private boolean validaCampos() {
        boolean isValidado = true;
        
        if ((jTextFieldNome == null) || (jTextFieldNome.getText().equals(""))) {
            JOptionPane.showMessageDialog(this, "O campo '" + jTextFieldNome.getName() + "' não está preenchido corretamente.\nFavor Verificar.", "Atenção", JOptionPane.ERROR_MESSAGE);
            isValidado = false;
        }
        
        if ((jTextFieldTelefone == null) || (jTextFieldTelefone.getText().equals(""))) {
            JOptionPane.showMessageDialog(this, "O campo '" + jTextFieldTelefone.getName() + "' não está preenchido corretamente.\nFavor Verificar.", "Atenção", JOptionPane.ERROR_MESSAGE);
            isValidado = false;
        }
        
        if ((jTextFieldEndereco == null) || (jTextFieldEndereco.getText().equals(""))) {
            JOptionPane.showMessageDialog(this, "O campo '" + jTextFieldEndereco.getName() + "' não está preenchido corretamente.\nFavor Verificar.", "Atenção", JOptionPane.ERROR_MESSAGE);
            isValidado = false;
        }
        
        if ((jComboBoxCidade == null) || (jComboBoxCidade.getSelectedItem() == null) || (jComboBoxCidade.getSelectedItem().equals(""))) {
            JOptionPane.showMessageDialog(this, "O campo '" + jComboBoxCidade.getName() + "' não está preenchido corretamente.\nFavor Verificar.", "Atenção", JOptionPane.ERROR_MESSAGE);
            isValidado = false;
        }
        
        return isValidado;
    }

}
